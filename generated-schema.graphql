schema {
  query: Query
  mutation: Mutation
}

type Query {
  getCategories: [Category!]!
  search(filters: SearchFilters!, first: Int, query: String!): ReviewSearchResponse!
  getEntity(id: Int!): Entity!
  searchReviews(filters: ReviewSearchFilters!, entityId: Int!, first: Int, query: String): SearchReviewsResponse!
  hasReviewed(entityId: Int!, userId: Int!): Boolean!
  getCategory(id: Int!): Category!
  getEntityOwnershipRequests(id: Int!): [EntityOwnershipRequest]!
  getPopularSearches: [PopularSearch]!
  getUser(id: Int!): User!
  getUserActivity(id: Int!): UserActivity!
  getUserEntities(id: Int!): [Entity]!
  getSearchHistory(id: Int!): [SearchHistory]!
  getReviewVotes(id: Int!): [ReviewVote]!
}

type PopularSearch {
  id: Int!
  query: String!
  searches: Int!
}

type SearchReviewsResponse {
  reviews: [Review]!
  total: Int!
}

type Mutation {
  addCategory(category: AddCategoryInput!): Category!
  addReview(review: ReviewInput!, hasReviewed: Boolean!): Review!
  updateEntityViews(viewCount: Int!, entityId: Int!): Boolean!
  requestOwnership(entityId: Int!, userId: Int!): Boolean!
  voteReview(vote: VoteInput!): Boolean!
  createUser(user: CreateUserInput!): CreateUserReturn!
  login(credentials: LoginInput!): CreateUserReturn!
  sendPasswordReset(email: String): Boolean!
  resetPassword(newCredentials: ResetPasswordCredentials!): Boolean!
  updateUserDetails(patch: UpdateUserDetailsInput!): Boolean!
  deleteSearchHistory(id: Int!): Boolean!
}

enum VoteType {
  UPVOTE
  DOWNVOTE
  REMOVE
}

input VoteInput {
  userId: Int!
  voteType: VoteType!
  reviewId: Int!
}

type EntitySearchResponse {
  entities: [Entity]!
  total: Int!
}

type ReviewSearchResponse {
  reviews: [Review]!
  entities: [Entity]!
  total: Int!
}

input SearchFilters {
  minRating: Int!
  maxRating: Int!
  sortyBy: String!
  categoryRestriction: String
}

input ReviewSearchFilters {
  minRating: Int!
  maxRating: Int!
  sortBy: String!
}

input ReviewInput {
  type: String!
  title: String!
  createdBy: Int!
  body: String!
  tags: [String]!
  rating: Int!
  specialContent: String
  entity: Int!
}

input CreateEntityInput {
  type: String!
  ownedBy: Int
  specialContent: String!
}

input AddCategoryInput {
  title: String!
  iconKey: String
  caption: String!
  approved: Boolean!
}

type Category {
  id: Int!
  title: String!
  caption: String!
  iconKey: String
  approved: Boolean!
  banner: String
  topTen: CategoryTopTen!
}

type CategoryTopTen {
  mostViewed: [Entity]!
  mostRecent: [Entity]!
}

type ReviewVote {
  id: Int!
  votedDate: String!
  voteType: VoteType
  reviewId: Int!
}

type Review {
  id: Int!
  type: String!
  title: String!
  createdBy: Int!
  createdByUser: User!
  createdAt: String!
  body: String!
  tags: [String]
  rating: Int!
  specialContent: String
  entity: Int!
  upvotes: Int!
  downvotes: Int!
}

type Entity {
  id: Int!
  type: String!
  ownedBy: User
  specialContent: String
  name: String!
  views: Int
}

type EntityOwnershipRequest {
  id: Int!
  requestedBy: Int!
  entity: Int!
  approved: Boolean!
}

type SearchHistory {
  id: Int!
  query: String!
  user: Int!
}

input UpdateUserDetailsInput {
  userId: Int!
  fullName: String
  birthday: String
  accountType: String
}

input ResetPasswordCredentials {
  email: String!
  newPassword: String!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type CreateUserReturn {
  user: User!
  token: String!
}

input CreateUserInput {
  fullName: String
  birthday: String
  email: String!
  password: String!
}

type User {
  id: Int!
  fullName: String
  birthday: String
  accountType: String!
  email: String!
}

type UserActivity {
  reviews: [Review]!
}
